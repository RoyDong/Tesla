var requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame ||
        window.webkitRequestAnimationFrame || window.msRequestAnimationFrame ||
        window.oRequestAnimationFrame || function(callback){setTimeout(callback, 1000 / 60);};

Function.prototype.bind = function( scope )
{
    var me = this , args = Array.prototype.slice( arguments, 1 );
    return function(){return me.apply( scope , args );};
};

var Trigger = function()
{
    this.triggers = {};
};

Trigger.prototype =
{
    constructor: Trigger,

    addTrigger: function( name , trigger , bind )
    {
        this.triggers[ name ] = [ trigger , bind || this ];
    },

    trigger: function( name )
    {
        if( this.triggers[ name ] )
        {
            var trigger = this.triggers[ name ];
            trigger[0].appply( trigger[1] , Array.prototype.slice( arguments , 1 ) );
        }
    }
};

var Src = function()
{
    this.pool = [];
    this.count = 0;
    this.loadedCount = 0;
};

Src.prototype = new Trigger;

Src.prototype.constructor = Src;

Src.prototype.load = function( src , callback )
{
    src[ callback || 'onload' ] = this.onload.bind( this , src );
    return src.id = this.count++;
};

Src.prototype.onload = function( src )
{
    this.pool[ src.id ] = src;
    this.loadedCount++;
    this.trigger( 'load' , src.name );

    if( this.loadedCount === this.count )
    {
        this.trigger( 'complete' );
    }
};

Src.prototype.get = function( n )
{
    return this.pool[ n ];
};

Src.prototype.add = function( src )
{
    src.id = this.count;
    this.pool.push( src );
    return this.count++;
};

var Point = function( x , y , z )
{
    this.x = x || 0;
    this.y = y || 0;
    this.z = z || 0;
};

Point.prototype =
{
    constructor: Point
};

var Geometry =
{
    isCover: function( x1 , x2 , length1 , length2 )
    {
        return Math.abs( x1 - x2 ) < ( x1 < x2 ? length1 : length2 );
    }
};

var Fx = function( x , y , z )
{
    Point.call( this , x , y , z );
    this.image = null;
};

Fx.prototype = new Point;
Fx.prototype.constructor = Fx;

var Scene = function()
{
    this.fxPool = [];
};

Scene.prototype =
{
    constructor: Scene,

    add: function( fx )
    {
        this.fxPool[ fx.z ] ? this.fxPool[ fx.z ].push( fx ) : this.fxPool[ fx.z ] = [ fx ];
    }
};

var Camera = function( x , y , width , height , depth , container )
{
    var canvas , i;

    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
    this.depth = depth;
    this.container = container || document.body;
    this.world = [];

    for( i = 0; i < depth; i++ )
    {
        canvas = document.createElement( 'canvas' );
        canvas.width = width;
        canvas.height = height;
        canvas.style.cssText = 'position: absolute;';
        this.world.push( canvas.getContext( '2d' ) );
        this.container.appendChild( canvas );
    }
};

Camera.prototype =
{
    constructor: Camera,

    shoot: function( scene )
    {
        var i , j , x , y , count , fx , fxs , ctx , img ,
            fxPool = scene.fxPool;

        for( i = 0; i < this.depth; i++ )
        {
            fxs = fxPool[i];

            if( fxs && ( count = fxs.length ) > 0 )
            {
                ctx = this.world[i];
                scene.fxPool[i] = [];
                ctx.clearRect( 0 , 0 , this.width , this.height );

                for( j = 0; j < count; j++ )
                {
                    fx  = fxs[j];
                    x   = fx.x - this.x;
                    y   = fx.y - this.y;
                    img = fx.image;

                    if( ( x > 0 ? x < this.width : -x < img.width ) &&
                        ( y > 0 ? y < this.height : -y < img.height ) )
                    {
                        ctx.drawImage( img , x , y );
                    }
                }
            }
        }
    },

    getWorldContext: function( depth )
    {
        return this.world[ depth ];
    }
};

var Images = new Src;

var Frame = function()
{
  console.log( this );return;
    if( this.state )
    {
        requestAnimationFrame( Frame );
    }

    Frame.now = new Date().getTime();
    Frame.interval = Frame.now - Frame.lastTime;
    Frame.loop();
    Frame.lastTime = Frame.now;
};

Frame.loop = function(){};

Frame.start = function()
{
    this.lastTime = new Date().getTime();
    this.state = 1;

    requestAnimationFrame( Frame );
};

Frame.stop = function()
{
    this.state = 0;
};
